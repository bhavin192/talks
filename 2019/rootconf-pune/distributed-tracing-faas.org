#+TITLE: Implementing distributed tracing in a FaaS platform
#+AUTHOR: Bhavin Gandhi
#+EMAIL: @_bhavin192
#+REVEAL_THEME: black
#+OPTIONS: num:nil toc:nil ^:nil reveal_slide_number:c/t
* Distributed tracing and FaaS?
  /Tracing Fission functions with Jaeger/

  Bhavin Gandhi

  bhavin[at]infracloud.io

  [[https://twitter.com/_bhavin192][@_bhavin192]]

  [[https://geeksocket.in][geeksocket.in]]
* Microservices?
  - Treating services as products
  - More easy to manage
  - What about debugging things?
* Observability
  - Logs
  - Metrics
  - Traces
* Functions on Kubernetes
  - Fission
  #+BEGIN_NOTES
  Talk about how Fission is completely Kubernetes aware, uses CRDs etc
  #+END_NOTES
** Components
   - Trigger
   - Environment
   - Function
** Fission function environments
   - Container images
   - Available for most of the languages
   - Extensible
* Tracing backends
  - Collecting the trace events called spans
  - Storing as well as visualization of those events
** How to collect these events?
   - Instrumenting your code
   - Client libraries built according to OpenTracing standards
* Introducing GaS
  /Greetings as Service/
  - Frontend
  - Two Functions
    - Greeter
    - Image
  - Using Kafka in between
* Let's trace things
  - Instrumenting each function code?
  - Environments to the rescue
* Modifying the Python environment
  - Uses Flask as HTTP server
  - ~server.py~ loads user defined functions
  - Directory structure
    #+BEGIN_SRC
    ./python-env
    ├── Dockerfile
    ├── lib
    │   ├── __init__.py
    │   └── tracing.py
    ├── README.md
    ├── requirements.txt
    └── server.py
    #+END_SRC
** 
   ~/specialize~ in ~server.py~
   #+BEGIN_SRC python
     # ...
     from lib.tracing import initialize_tracing
     # ...
     @self.route('/specialize', methods=['POST'])
     def load():
	 # load user function from codepath
	 codepath = '/userfunc/user'
	 userfunc = (imp.load_source('user', codepath)).main
	 if os.getenv('ENABLE_TRACING') is not None:
	     self.userfunc = initialize_tracing(userfunc)
	 else:
	     self.userfunc = userfunc
	 return ""
     # ...
   #+END_SRC
** 
   ~initialize_tracing~ in ~lib/tracing.py~
   #+BEGIN_SRC python
   def initialize_tracing(func):
       def inner():
	   fission_func_name = request.headers.get("X-Fission-Function-Name",
						   "name")
	   span_name = fission_func_name + "-span"
           tracer = _init_tracer(fission_func_name)
	   span_ctx = tracer.extract(Format.HTTP_HEADERS, request.headers)
	   with tracer.start_span(span_name, child_of=span_ctx) as span:
	       span.set_tag("generated-by", "lib.tracing")
	       generated_headers = dict()
	       tracer.inject(span, Format.HTTP_HEADERS, generated_headers)
	       # User may want to set tags on span or use the generated_headers
	       g.span = span
	       g.generated_headers = generated_headers
	       func_resp = func()
	   return func_resp
       return inner
   #+END_SRC
* Visualization in Jaeger
  - Spans are not linked together
** 
   Spans of greeter function

   [[file:greeter_single_span.png]]
** 
   Spans of image function

   [[file:image_single_span.png]]
* Linking spans together
  - Context propagation
  - Passing context over the wire
** Modifying Kafka MQT of Fission
   /More about MQT of Fission/
   - New records are sent as HTTP request to functions
   - No support for Kafka record headers
** 
   [[file:kafka_header_support_full_image.png]]
** Running the service again
   [[file:linked_spans.png]]
** 
   [[file:trace_graph_child_of.png]]
* Wrong timestamps on spans
  - ClockSkew adjustments
  - Using ~FOLLOWS_FROM~ reference instead CHILD_OF
** Adding support for references in ~jaeger-client-python~
   [[file:jaeger-client-python-references-support.png]]
** Modified ~tracing.py~
   #+BEGIN_SRC python
     # ...
     span_ctx = tracer.extract(Format.HTTP_HEADERS, request.headers)
     logger.info("created new span_ctx: %s", span_ctx)
     # passing it as reference instead of child_of relation as we
     # have async calls to services
     span_reference = follows_from(referenced_context=span_ctx)
     response = None
     with tracer.start_span(span_name, references=span_reference) as span:
	 # ...
	 return response
   #+END_SRC
** 
   [[file:linked_spans_timeline.png]]
** 
   [[file:trace_graph_time_follows_from.png]]
* Things learned
  - We may encounter duplicate trace Ids
    - Use 128bit trace Ids ([[https://github.com/jaegertracing/jaeger-client-python/pull/230][PR#230]])
  - While working with asynchronous applications use ~FOLLOWS_FROM~
    reference
  - ~Tracer.close()~ is not fully synchronous ([[https://github.com/jaegertracing/jaeger-client-python/issues/229#issuecomment-451363106][#229 (comment)]], [[https://github.com/jaegertracing/jaeger-client-python/issues/50#issuecomment-394922333][#50
    (comment)]])
* Questions
* References
  - GaS is inspired by
    [[https://github.com/PacktPublishing/Mastering-Distributed-Tracing/tree/master/Chapter04][PacktPublishing/Mastering-Distributed-Tracing/Chapter04]]
  - [[https://www.packtpub.com/networking-and-servers/mastering-distributed-tracing][Mastering Distributed Tracing]] by Yuri Shkuro
  - [[https://www.jaegertracing.io]]
  - [[https://fission.io]]
